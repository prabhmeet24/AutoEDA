# -*- coding: utf-8 -*-
"""Univariate class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/196kMcggeKVKMP6Y5WdXS4OAZQWoj89PO

# **Classes**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import scipy.stats as stats
from prettytable import PrettyTable
import re

class UnivariateAnalysis:
    def __init__(self, df):
        self.df = df
        self.cat_cols = pd.DataFrame({})
        self.num_cols = pd.DataFrame({})

    def univariate(self, cat_columns=None, num_columns=None, top_n=10):
        if cat_columns is None:
            cat_columns = []
        if num_columns is None:
            num_columns = []

        if self.df.empty:
            raise ValueError("The dataframe is empty. No analysis can be carried out")

        with warnings.catch_warnings():
            warnings.simplefilter(action='ignore', category=FutureWarning)

            for column in self.df.columns:
                unique_values = self.df[column].unique()
                num_unique_values = len(unique_values)
                total_values = len(self.df[column])
                threshold_percentage = 0.05

                if column in cat_columns or (column not in num_columns and (num_unique_values / total_values < threshold_percentage or self.df[column].dtype in ['object', 'bool'])):
                    print(f"\n\n\033[1mUnivariate Analysis of Categorical Column {column}\033[0m")
                    self.cat_cols[column] = self.df[column]
                    value_counts = self.cat_cols[column].value_counts()

                    if len(value_counts) > 15:
                        value_counts = value_counts.head(top_n)

                    plt.figure(figsize=(20, 10))
                    plt.subplot(1, 3, 1)
                    value_counts.plot(kind='pie', autopct='%0.1f%%', title=f'Top Categories - {column} - PieChart')
                    plt.subplot(1, 3, 2)
                    value_counts.plot(kind='bar', title=f'Top Categories - {column} - BarPlot')
                    value_counts = self.cat_cols[column].value_counts()
                    if len(value_counts) > 15:
                        top_10_categories = value_counts.head(top_n).index
                        df_top_10 = self.df[self.df[column].isin(top_10_categories)]
                    else:
                        df_top_10 = self.df
                    plt.subplot(1, 3, 3)
                    sns.violinplot(data=df_top_10, x=column)
                    plt.title(f"{column} - ViolinPlot")
                    plt.xticks(rotation='vertical')
                    plt.show()
                elif column in num_columns or (self.df[column].dtype in ['int64', 'float64'] and column not in cat_columns):
                    print(f"\n\n\033[1mUnivariate Analysis of Numerical Column {column}\033[0m")
                    self.num_cols[column] = self.df[column]
                    plt.figure(figsize=(20, 10))
                    plt.subplot(1, 5, 1)
                    self.num_cols[column].plot(kind='hist', title=f'{column} - Histogram')
                    plt.subplot(1, 5, 2)
                    self.num_cols[column].plot(kind='kde', title=f'{column} - Kernel Density Estimation')
                    plt.subplot(1, 5, 3)
                    stats.probplot(self.num_cols[column], dist="norm", plot=plt)
                    plt.title(f'{column} - Probability Plot')
                    plt.xlabel('Theoretical quantiles')
                    plt.ylabel('Ordered Values')
                    plt.subplot(1, 5, 4)
                    self.num_cols[column].plot(kind='box', title=f'{column} - Whisker Plot')
                    plt.subplot(1, 5, 5)
                    plt.plot(self.num_cols[column])
                    plt.title(f'{column} - LinePlot')
                    plt.show()
                else:
                    raise ValueError("Unknown column dtype")

    def show_report(self):
        if not self.num_cols.empty:
            report_table = PrettyTable(["Column Name", "Skewness", "Type of Skewness", "Num Outliers"])
            report_table_cat = PrettyTable(["Column Name", "Most common category", "Number of categories"])
            for column in self.num_cols.columns:
                skewness = self.num_cols[column].skew()
                skewness_type = "Positive" if skewness > 0.5 else "Negative" if skewness < -0.5 else "Symmetric"

                Q1 = self.num_cols[column].quantile(0.25)
                Q3 = self.num_cols[column].quantile(0.75)
                IQR = Q3 - Q1
                num_outliers = ((self.num_cols[column] < (Q1 - 1.5 * IQR)) |
                                (self.num_cols[column] > (Q3 + 1.5 * IQR))).sum()

                report_table.add_row([column, f"{skewness:.5f}", skewness_type, num_outliers])

            print("\n\n\033[1mNumerical Columns\033[0m")
            print(report_table)
            for column in self.cat_cols.columns:
                num_unique_categories = len(self.cat_cols[column].unique())
                most_common_category = self.cat_cols[column].value_counts().idxmax()
                report_table_cat.add_row([column, most_common_category, num_unique_categories])
            print(report_table_cat)
        else:
            raise ValueError("No data available for report generation.")